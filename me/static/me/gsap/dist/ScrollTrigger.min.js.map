{"version":3,"file":"ScrollTrigger.min.js","sources":["../src/ScrollTrigger.js"],"sourcesContent":["/*!\n * ScrollTrigger 3.3.3\n * https://greensock.com\n *\n * @license Copyright 2008-2020, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n/* eslint-disable */\n\nlet gsap, _coreInitted, _win, _doc, _docEl, _body, _root, _resizeDelay, _raf, _request, _toArray, _clamp, _time2, _syncInterval, _refreshing, _pointerIsDown, _transformProp,\n\t_startup = 1,\n\t_getTime = Date.now,\n\t_time1 = _getTime(),\n\t_lastScrollTime = 0,\n\t_enabled = 1,\n\t_passThrough = v => v,\n\t_windowExists = () => typeof(window) !== \"undefined\",\n\t_getGSAP = () => gsap || (_windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap),\n\t_isViewport = e => !!~_root.indexOf(e),\n\t_getScrollFunc = (element, {s}) => function(value) { return arguments.length ? (element[s] = value) : element[s]; },\n\t_maxScroll = (element, {s, d2}) => (s = \"scroll\" + d2) && _isViewport(element) ? Math.max(_docEl[s], _body[s]) - (_win[\"inner\" + d2] || _docEl[\"client\" + d2] || _body[\"client\" + d2]) : element[s] - element[\"offset\" + d2],\n\t_isString = value => typeof(value) === \"string\",\n\t_isFunction = value => typeof(value) === \"function\",\n\t_isNumber = value => typeof(value) === \"number\",\n\t_isObject = value => typeof(value) === \"object\",\n\t_abs = Math.abs,\n\t_scrollLeft = \"scrollLeft\",\n\t_scrollTop = \"scrollTop\",\n\t_left = \"left\",\n\t_top = \"top\",\n\t_right = \"right\",\n\t_bottom = \"bottom\",\n\t_width = \"width\",\n\t_height = \"height\",\n\t_Right = \"Right\",\n\t_Left = \"Left\",\n\t_Top = \"Top\",\n\t_Bottom = \"Bottom\",\n\t_padding = \"padding\",\n\t_margin = \"margin\",\n\t_Width = \"Width\",\n\t_Height = \"Height\",\n\t_px = \"px\",\n\t_horizontal = {s: _scrollLeft, p: _left, p2: _Left, os: _right, os2: _Right, d: _width, d2: _Width, a: \"x\", sc: function(value) { return arguments.length ? _win.scrollTo(value, _vertical.sc()) : _win.pageXOffset || _doc[_scrollLeft] || _docEl[_scrollLeft] || _body[_scrollLeft] || 0}},\n\t_vertical = {s: _scrollTop, p: _top, p2: _Top, os: _bottom, os2: _Bottom, d: _height, d2: _Height, a: \"y\", op: _horizontal, sc: function(value) { return arguments.length ? _win.scrollTo(_horizontal.sc(), value) : _win.pageYOffset || _doc[_scrollTop] || _docEl[_scrollTop] || _body[_scrollTop] || 0}},\n\t_getComputedStyle = element => _win.getComputedStyle(element),\n\t_makePositionable = element => element.style.position = (_getComputedStyle(element).position === \"absolute\") ? \"absolute\" : \"relative\", // if the element already has position: absolute, leave that, otherwise make it position: relative\n\t_setDefaults = (obj, defaults) => {\n\t\tfor (let p in defaults) {\n\t\t\t(p in obj) || (obj[p] = defaults[p]);\n\t\t}\n\t\treturn obj;\n\t},\n\t//_isInViewport = element => (element = _getBounds(element)) && !(element.top > (_win.innerHeight || _docEl.clientHeight) || element.bottom < 0 || element.left > (_win.innerWidth || _docEl.clientWidth) || element.right < 0) && element,\n\t_getBounds = (element, withoutTransforms) => {\n\t\tlet tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== \"matrix(1, 0, 0, 1, 0, 0)\" && gsap.to(element, {x: 0, y: 0, xPercent: 0, yPercent: 0, rotation: 0, rotationX: 0, rotationY: 0, scale: 1, skewX: 0, skewY: 0}).progress(1),\n\t\t\tbounds = element.getBoundingClientRect();\n\t\ttween && tween.progress(0).kill();\n\t\treturn bounds;\n\t},\n\t_getSize = (element, {d2}) => element[\"offset\" + d2] || element[\"client\" + d2] || 0,\n\t_getLabels = animation => {\n\t\treturn value => {\n\t\t\tlet a = [],\n\t\t\t\tlabels = animation.labels,\n\t\t\t\tduration = animation.duration(),\n\t\t\t\tp;\n\t\t\tfor (p in labels) {\n\t\t\t\ta.push(labels[p] / duration);\n\t\t\t}\n\t\t\treturn gsap.utils.snap(a, value);\n\t\t};\n\t},\n\t_multiListener = (func, element, types, callback) => types.split(\",\").forEach(type => func(element, type, callback)),\n\t_addListener = (element, type, func) => element.addEventListener(type, func, {passive: true}),\n\t_removeListener = (element, type, func) => element.removeEventListener(type, func),\n\t_markerDefaults = {startColor: \"green\", endColor: \"red\", indent: 0, fontSize: \"16px\", fontWeight:\"normal\"},\n\t_defaults = {toggleActions: \"play\", anticipatePin: 0},\n\t_keywords = {top: 0, left: 0, center: 0.5, bottom: 1, right: 1},\n\t_offsetToPx = (value, size) => {\n\t\tif (_isString(value)) {\n\t\t\tlet eqIndex = value.indexOf(\"=\"),\n\t\t\t\trelative = ~eqIndex ? +(value.charAt(eqIndex-1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;\n\t\t\tif (relative) {\n\t\t\t\t(value.indexOf(\"%\") > eqIndex) && (relative *= size / 100);\n\t\t\t\tvalue = value.substr(0, eqIndex-1);\n\t\t\t}\n\t\t\tvalue = relative + ((value in _keywords) ? _keywords[value] * size : ~value.indexOf(\"%\") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);\n\t\t}\n\t\treturn value;\n\t},\n\t_createMarker = (type, name, container, direction, {startColor, endColor, fontSize, indent, fontWeight}, offset, matchWidthEl) => {\n\t\tlet e = _doc.createElement(\"div\"),\n\t\t\tisViewport = _isViewport(container),\n\t\t\tisScroller = type.indexOf(\"scroller\") !== -1,\n\t\t\tparent = isViewport ? _body : container,\n\t\t\tisStart = type.indexOf(\"start\") !== -1,\n\t\t\tcolor = isStart ? startColor : endColor,\n\t\t\tcss = \"border-color:\" + color + \";font-size:\" + fontSize + \";color:\" + color + \";font-weight:\" + fontWeight + \";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;\";\n\t\tcss += \"position:\" + (isScroller && isViewport ? \"fixed;\" : \"absolute;\");\n\t\t(isScroller || !isViewport) && (css += (direction === _vertical ? _right : _bottom) + \":\" + (offset + parseFloat(indent)) + \"px;\");\n\t\tmatchWidthEl && (css += \"box-sizing:border-box;text-align:left;width:\" + matchWidthEl.offsetWidth + \"px;\");\n\t\te._isStart = isStart;\n\t\te.setAttribute(\"class\", \"gsap-marker-\" + type);\n\t\te.style.cssText = css;\n\t\te.innerText = name || name === 0 ? type + \"-\" + name : type;\n\t\tparent.insertBefore(e, parent.children[0]);\n\t\te._offset = e[\"offset\" + direction.op.d2];\n\t\t_positionMarker(e, 0, direction, isViewport, isStart);\n\t\treturn e;\n\t},\n\t_positionMarker = (marker, start, direction, isViewport, flipped) => {\n\t\tlet vars = {},\n\t\t\tside = direction[flipped ? \"os2\" : \"p2\"],\n\t\t\toppositeSide = direction[flipped ? \"p2\" : \"os2\"];\n\t\tmarker._isFlipped = flipped;\n\t\tvars[direction.a + \"Percent\"] = flipped ? -100 : 0;\n\t\tvars[direction.a] = flipped ? 1 : 0;\n\t\tvars[\"border\" + side + _Width] = 1;\n\t\tvars[\"border\" + oppositeSide + _Width] = 0;\n\t\tvars[direction.p] = start;\n\t\tgsap.set(marker, vars);\n\t},\n\t_triggers = [],\n\t_ids = {},\n\t_sync = () => _request || (_request = _raf(_updateAll)),\n\t_onScroll = () => {\n\t\tif (!_request) {\n\t\t\t_request = _raf(_updateAll);\n\t\t\t_lastScrollTime || _dispatch(\"scrollStart\");\n\t\t\t_lastScrollTime = _getTime();\n\t\t}\n\t},\n\t_onResize = () => !_refreshing && (_getTime() - _lastScrollTime > 200) && _resizeDelay.restart(true), // ignore resizes that occur DURING a scroll as well as those triggered by refresh()\n\t_listeners = {},\n\t_emptyArray = [],\n\t_dispatch = type => (_listeners[type] && _listeners[type].map(f => f())) || _emptyArray,\n\t_refreshAll = force => {\n\t\tlet refreshInits = _dispatch(\"refreshInit\"),\n\t\t\tl = _triggers.length,\n\t\t\ti = l;\n\t\twhile (i--) {\n\t\t\t_triggers[i].scroll.rec = _triggers[i].scroll(); // record the scroll positions so that in each refresh() we can ensure that it doesn't shift. Remember, pinning can make things change around, especially if the same element is pinned multiple times.\n\t\t}\n\t\tfor (i = 0; i < l; i++) {\n\t\t\t_triggers[i] && _triggers[i].refresh(force !== true);\n\t\t}\n\t\trefreshInits.forEach(result => result && result.render && result.render(-1)); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.\n\t\ti = _triggers.length;\n\t\twhile (i--) {\n\t\t\t_triggers[i].scroll.rec = 0;\n\t\t}\n\t\t_dispatch(\"refresh\");\n\t},\n\t_updateAll = () => {\n\t\tlet l = _triggers.length,\n\t\t\ti = 0,\n\t\t\ttime = _getTime(),\n\t\t\trecordVelocity = time - _time1 >= 50;\n\t\tif (recordVelocity) {\n\t\t\tif (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {\n\t\t\t\t_lastScrollTime = 0;\n\t\t\t\t_dispatch(\"scrollEnd\");\n\t\t\t}\n\t\t\t_time2 = _time1;\n\t\t\t_time1 = time;\n\t\t}\n\t\tfor (; i < l; i++) {\n\t\t\t_triggers[i] && _triggers[i].update(0, recordVelocity);\n\t\t}\n\t\t_request = 0;\n\t},\n\t_propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, \"display\", \"flexShrink\"],\n\t_stateProps = _propNamesToCopy.concat([_width, _height, \"boxSizing\", \"max\" + _Width, \"max\" + _Height, \"position\", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),\n\t_swapPinOut = (pin, spacer, state) => {\n\t\t_setState(state);\n\t\tif (pin.parentNode === spacer) {\n\t\t\tlet parent = spacer.parentNode;\n\t\t\tif (parent) {\n\t\t\t\tparent.insertBefore(pin, spacer);\n\t\t\t\tparent.removeChild(spacer);\n\t\t\t}\n\t\t}\n\t},\n\t_swapPinIn = (pin, spacer, cs) => {\n\t\tif (pin.parentNode !== spacer) {\n\t\t\tlet i = _propNamesToCopy.length,\n\t\t\t\tspacerStyle = spacer.style,\n\t\t\t\tpinStyle = pin.style,\n\t\t\t\tp;\n\t\t\twhile (i--) {\n\t\t\t\tp = _propNamesToCopy[i];\n\t\t\t\tspacerStyle[p] = cs[p];\n\t\t\t}\n\t\t\tspacerStyle.position = cs.position === \"absolute\" ? \"absolute\" : \"relative\";\n\t\t\tpinStyle[_bottom] = pinStyle[_right] = \"auto\";\n\t\t\tspacerStyle.overflow = \"visible\";\n\t\t\tspacerStyle.boxSizing = \"border-box\";\n\t\t\tspacerStyle[_width] = _getSize(pin, _horizontal) + _px;\n\t\t\tspacerStyle[_height] = _getSize(pin, _vertical) + _px;\n\t\t\tspacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = \"0\";\n\t\t\tpinStyle[_width] = cs[_width];\n\t\t\tpinStyle[_height] = cs[_height];\n\t\t\tpinStyle[_padding] = cs[_padding];\n\t\t\tpin.parentNode.insertBefore(spacer, pin);\n\t\t\tspacer.appendChild(pin);\n\t\t}\n\t},\n\t_capsExp = /([A-Z])/g,\n\t_setState = state => {\n\t\tlet style = state.t.style,\n\t\t\tl = state.length,\n\t\t\ti = 0,\n\t\t\tp, value;\n\t\tfor (; i < l; i +=2) {\n\t\t\tvalue = state[i+1];\n\t\t\tp = state[i];\n\t\t\tif (value) {\n\t\t\t\tstyle[p] = value;\n\t\t\t} else if (style[p]) {\n\t\t\t\tstyle.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t}\n\t\t}\n\t},\n\t_getState = element => { // returns an array with alternating values like [property, value, property, value] and a \"t\" property pointing to the target (element). Makes it fast and cheap.\n\t\tlet l = _stateProps.length,\n\t\t\tstyle = element.style,\n\t\t\tstate = [],\n\t\t\ti = 0;\n\t\tfor (; i < l; i++) {\n\t\t\tstate.push(_stateProps[i], style[_stateProps[i]]);\n\t\t}\n\t\tstate.t = element;\n\t\treturn state;\n\t},\n\t_copyState = (state, override, omitOffsets) => {\n\t\tlet result = [],\n\t\t\tl = state.length,\n\t\t\ti = omitOffsets ? 8 : 0, // skip top, left, right, bottom if omitOffsets is true\n\t\t\tp;\n\t\tfor (; i < l; i += 2) {\n\t\t\tp = state[i];\n\t\t\tresult.push(p, (p in override) ? override[p] : state[i+1]);\n\t\t}\n\t\tresult.t = state.t;\n\t\treturn result;\n\t},\n\t_winOffsets = {left:0, top:0},\n\t_parsePosition = (value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, isViewport, scrollerMax) => {\n\t\t_isFunction(value) && (value = value(self));\n\t\tif (_isString(value) && value.substr(0,3) === \"max\") {\n\t\t\tvalue = scrollerMax + (value.charAt(4) === \"=\" ? _offsetToPx(\"0\" + value.substr(3), scrollerSize) : 0);\n\t\t}\n\t\tif (!_isNumber(value)) {\n\t\t\t_isFunction(trigger) && (trigger = trigger(self));\n\t\t\tlet element = _toArray(trigger)[0] || _body,\n\t\t\t\tbounds = _getBounds(element) || {},\n\t\t\t\toffsets = value.split(\" \"),\n\t\t\t\tlocalOffset, globalOffset, display;\n\t\t\tif ((!bounds || (!bounds.left && !bounds.top)) && _getComputedStyle(element).display === \"none\") { // if display is \"none\", it won't report getBoundingClientRect() properly\n\t\t\t\tdisplay = element.style.display;\n\t\t\t\telement.style.display = \"block\";\n\t\t\t\tbounds = _getBounds(element);\n\t\t\t\tdisplay ? (element.style.display = display) : element.style.removeProperty(\"display\");\n\t\t\t}\n\t\t\tlocalOffset = _offsetToPx(offsets[0], bounds[direction.d]);\n\t\t\tglobalOffset = _offsetToPx(offsets[1] || \"0\", scrollerSize);\n\t\t\tvalue = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;\n\t\t\tmarkerScroller && _positionMarker(markerScroller, globalOffset, direction, isViewport, (scrollerSize - globalOffset < 20 || (markerScroller._isStart && globalOffset > 20)));\n\t\t\tscrollerSize -= scrollerSize - globalOffset; // adjust for the marker\n\t\t} else if (markerScroller) {\n\t\t\t_positionMarker(markerScroller, scrollerSize, direction, isViewport, true);\n\t\t}\n\t\tif (marker) {\n\t\t\tlet position = value + scrollerSize,\n\t\t\t\tisStart = marker._isStart;\n\t\t\tscrollerMax = \"scroll\" + direction.d2;\n\t\t\t_positionMarker(marker, position, direction, isViewport, (isStart && position > 20) || (!isStart && (isViewport ? Math.max(_body[scrollerMax], _docEl[scrollerMax]) : marker.parentNode[scrollerMax]) <= position + 1)); // marker.style[direction.p] = (value + scrollerSize - (isViewport ? direction.m : 0)) + \"px\";\n\t\t\tif (isViewport) {\n\t\t\t\tscrollerBounds = _getBounds(markerScroller);\n\t\t\t\tisViewport && (marker.style[direction.op.p] = (scrollerBounds[direction.op.p] - direction.op.m - marker._offset) + _px);\n\t\t\t}\n\t\t}\n\t\treturn Math.round(value);\n\t},\n\t_prefixExp = /(?:webkit|moz|length)/i,\n\t_reparent = (element, parent) => {\n\t\tif (element.parentNode !== parent) {\n\t\t\tlet style = element.style,\n\t\t\t\tp, cs;\n\t\t\tif (parent === _body) {\n\t\t\t\telement._stOrig = style.cssText; // record original inline styles so we can revert them later\n\t\t\t\tcs = _getComputedStyle(element);\n\t\t\t\tfor (p in cs) { // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.\n\t\t\t\t\tif (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === \"string\" && p !== \"0\") {\n\t\t\t\t\t\tstyle[p] = cs[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstyle.cssText = element._stOrig;\n\t\t\t}\n\t\t\tparent.appendChild(element);\n\t\t}\n\t},\n\t// returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)\n\t_getTweenCreator = (scroller, direction) => {\n\t\tlet getScroll = _isViewport(scroller) ? direction.sc : _getScrollFunc(scroller, direction),\n\t\t\tprop = \"_scroll\" + direction.p2, // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.\n\t\t\tlastScroll,\n\t\t\tgetTween = (scrollTo, vars, initialValue, change1, change2) => {\n\t\t\t\tlet tween = getTween.tween,\n\t\t\t\t\tonComplete = vars.onComplete,\n\t\t\t\t\tmodifiers = {};\n\t\t\t\ttween && tween.kill();\n\t\t\t\tlastScroll = getScroll();\n\t\t\t\tvars[prop] = scrollTo;\n\t\t\t\tvars.modifiers = modifiers;\n\t\t\t\tmodifiers[prop] = value => {\n\t\t\t\t\tif (getScroll() !== lastScroll) { // if the user scrolls, kill the tween!\n\t\t\t\t\t\ttween.kill();\n\t\t\t\t\t\tgetTween.tween = 0;\n\t\t\t\t\t\tvalue = getScroll();\n\t\t\t\t\t} else if (change1) {\n\t\t\t\t\t\tvalue = initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio;\n\t\t\t\t\t}\n\t\t\t\t\treturn (lastScroll = Math.round(value));\n\t\t\t\t};\n\t\t\t\tvars.onComplete = () => {\n\t\t\t\t\tgetTween.tween = 0;\n\t\t\t\t\tonComplete && onComplete.call(tween);\n\t\t\t\t};\n\t\t\t\ttween = getTween.tween = gsap.to(scroller, vars);\n\t\t\t\treturn tween;\n\t\t\t};\n\t\tscroller[prop] = getScroll;\n\t\treturn getTween;\n\t};\n\n_horizontal.op = _vertical;\n\n\n\nexport class ScrollTrigger {\n\n\tconstructor(vars, animation) {\n\t\t_coreInitted || ScrollTrigger.register(gsap) || console.warn(\"Please gsap.registerPlugin(ScrollTrigger)\");\n\t\tthis.init(vars, animation);\n\t}\n\n\tinit(vars, animation) {\n\t\tthis.progress = 0;\n\t\tthis.vars && this.kill(1); // in case it's being initted again\n\t\tif (!_enabled) {\n\t\t\tthis.update = this.refresh = this.kill = _passThrough;\n\t\t\treturn;\n\t\t}\n\t\tvars = _setDefaults((_isString(vars) || _isNumber(vars) || vars.nodeType) ? {trigger: vars} : vars, _defaults);\n\t\tlet direction = vars.horizontal ? _horizontal : _vertical,\n\t\t\t{onUpdate, toggleClass, id, onToggle, onRefresh, scrub, trigger, pin, pinSpacing, invalidateOnRefresh, anticipatePin, onScrubComplete, onSnapComplete, once, snap, pinReparent} = vars,\n\t\t\tisToggle = !scrub && scrub !== 0,\n\t\t\tscroller = _toArray(vars.scroller || _win)[0],\n\t\t\tscrollerCache = gsap.core.getCache(scroller),\n\t\t\tisViewport = _isViewport(scroller),\n\t\t\tcallbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],\n\t\t\ttoggleActions = isToggle && (once ? \"play\" : vars.toggleActions).split(\" \"),\n\t\t\tmarkers = \"markers\" in vars ? vars.markers : _defaults.markers,\n\t\t\tborderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)[\"border\" + direction.p2 + _Width]) || 0,\n\t\t\tself = this,\n\t\t\tsoftRefresh = () => ScrollTrigger.removeEventListener(\"scrollEnd\", softRefresh) || self.refresh(),\n\t\t\tonRefreshInit = vars.onRefreshInit && (() => vars.onRefreshInit(self)),\n\t\t\ttweenTo, pinCache, snapFunc, isReverted, scroll1, scroll2, start, end, markerStart, markerEnd, markerStartTrigger, markerEndTrigger, markerVars,\n\t\t\tchange, pinOriginalState, pinActiveState, pinState, spacer, offset, pinGetter, pinSetter, pinStart, pinChange, spacingStart, spacingActive, markerStartSetter,\n\t\t\tmarkerEndSetter, cs, snap1, snap2, scrubScrollTime, scrubTween, scrubSmooth, snapDurClamp, snapDelayedCall, enabled;\n\n\t\tanticipatePin *= 45;\n\t\t_triggers.push(self);\n\t\tself.scroller = scroller;\n\t\tself.scroll = isViewport ? direction.sc : _getScrollFunc(scroller, direction);\n\t\tscroll1 = self.scroll();\n\t\tself.vars = vars;\n\t\tanimation = animation || vars.animation;\n\t\tscrollerCache.tweenScroll = scrollerCache.tweenScroll || {\n\t\t\ttop: _getTweenCreator(scroller, _vertical),\n\t\t\tleft: _getTweenCreator(scroller, _horizontal)\n\t\t};\n\t\tself.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];\n\t\tif (animation) {\n\t\t\tanimation.vars.lazy = false;\n\t\t\tanimation._initted || (animation.vars.immediateRender !== false && animation.render(-0.01, true, true));\n\t\t\tself.animation = animation.pause();\n\t\t\tanimation.scrollTrigger = self;\n\t\t\tscrubSmooth = _isNumber(scrub) && scrub;\n\t\t\tscrubSmooth && (scrubTween = gsap.to(animation, {ease: \"power3\", duration: scrubSmooth, onComplete: () => onScrubComplete && onScrubComplete(self)}));\n\t\t\tsnap1 = 0;\n\t\t\tid || (id = animation.vars.id);\n\t\t}\n\t\tif (snap) {\n\t\t\t_isObject(snap) || (snap = {snapTo: snap});\n\t\t\tsnapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === \"labels\" ? _getLabels(animation) : gsap.utils.snap(snap.snapTo);\n\t\t\tsnapDurClamp = snap.duration || {min: 0.1, max: 2};\n\t\t\tsnapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);\n\t\t\tsnapDelayedCall = gsap.delayedCall(snap.delay || (scrubSmooth / 2) || 0.1, () => {\n\t\t\t\tif (!_lastScrollTime || (_lastScrollTime === scrubScrollTime && !_pointerIsDown)) {\n\t\t\t\t\tlet totalProgress = animation && !isToggle ? animation.totalProgress() : self.progress,\n\t\t\t\t\t\tvelocity = ((totalProgress - snap2) / (_getTime() - _time2) * 1000) || 0,\n\t\t\t\t\t\tchange1 = _abs(velocity / 2) * velocity / 0.185,\n\t\t\t\t\t\tnaturalEnd = totalProgress + change1,\n\t\t\t\t\t\tendValue = _clamp(0, 1, snapFunc(naturalEnd, self)),\n\t\t\t\t\t\tchange2 = endValue - totalProgress - change1,\n\t\t\t\t\t\tscroll = self.scroll(),\n\t\t\t\t\t\tendScroll = Math.round(start + endValue * change),\n\t\t\t\t\t\ttween = tweenTo.tween;\n\t\t\t\t\tif (scroll <= end && scroll >= start) {\n\t\t\t\t\t\tif (tween && !tween._initted) { // there's an overlapping snap! So we must figure out which one is closer and let that tween live.\n\t\t\t\t\t\t\tif (tween.data <= Math.abs(endScroll - scroll)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween.kill();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttweenTo(endScroll, {\n\t\t\t\t\t\t\tduration: snapDurClamp(_abs( (Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05) || 0)),\n\t\t\t\t\t\t\tease: snap.ease || \"power3\",\n\t\t\t\t\t\t\tdata: Math.abs(endScroll - scroll), // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.\n\t\t\t\t\t\t\tonComplete: () => {\n\t\t\t\t\t\t\t\tsnap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;\n\t\t\t\t\t\t\t\tonSnapComplete && onSnapComplete(self);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, start + totalProgress * change, change1 * change, change2 * change);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsnapDelayedCall.restart(true);\n\t\t\t\t}\n\t\t\t}).pause();\n\t\t}\n\t\tid && (_ids[id] = self);\n\t\ttrigger = self.trigger = _toArray(trigger || pin)[0];\n\t\tpin = pin === true ? trigger : _toArray(pin)[0];\n\t\t_isString(toggleClass) && (toggleClass = {targets: trigger, className: toggleClass});\n\t\tif (pin) {\n\t\t\t(pinSpacing === false || pinSpacing === _margin) || (pinSpacing = _getComputedStyle(pin.parentNode).display === \"flex\" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default.\n\t\t\tself.pin = pin;\n\t\t\tvars.force3D !== false && gsap.set(pin, {force3D: true});\n\t\t\tpinCache = gsap.core.getCache(pin);\n\t\t\tif (!pinCache.spacer) { // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the \"original\" pin state after it has already been affected by another ScrollTrigger.\n\t\t\t\tpinCache.spacer = spacer = _doc.createElement(\"div\");\n\t\t\t\tspacer.setAttribute(\"class\", \"pin-spacer\" + (id ? \" pin-spacer-\" + id : \"\"));\n\t\t\t\tpinCache.pinState = pinOriginalState = _getState(pin);\n\t\t\t} else {\n\t\t\t\tpinOriginalState = pinCache.pinState;\n\t\t\t}\n\t\t\tself.spacer = spacer = pinCache.spacer;\n\t\t\tcs = _getComputedStyle(pin);\n\t\t\tspacingStart = cs[pinSpacing + direction.os2];\n\t\t\tpinGetter = gsap.getProperty(pin);\n\t\t\tpinSetter = gsap.quickSetter(pin, direction.a, _px);\n\t\t\t_swapPinIn(pin, spacer, cs);\n\t\t\tpinState = _getState(pin);\n\t\t}\n\t\tif (markers) {\n\t\t\tmarkerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;\n\t\t\tmarkerStartTrigger = _createMarker(\"scroller-start\", id, scroller, direction, markerVars, 0);\n\t\t\tmarkerEndTrigger = _createMarker(\"scroller-end\", id, scroller, direction, markerVars, 0, markerStartTrigger);\n\t\t\toffset = markerStartTrigger[\"offset\" + direction.op.d2];\n\t\t\tmarkerStart = _createMarker(\"start\", id, scroller, direction, markerVars, offset);\n\t\t\tmarkerEnd =_createMarker(\"end\", id, scroller, direction, markerVars, offset);\n\t\t\tif (!isViewport) {\n\t\t\t\t_makePositionable(scroller);\n\t\t\t\tgsap.set([markerStartTrigger, markerEndTrigger], {force3D: true});\n\t\t\t\tmarkerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);\n\t\t\t\tmarkerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);\n\t\t\t}\n\t\t}\n\n\t\tself.revert = revert => {\n\t\t\tlet r = revert !== false;\n\t\t\tif (r !== isReverted) {\n\t\t\t\tself.update(r); // make sure the pin is back in its original position so that all the measurements are correct.\n\t\t\t\tpin && r && _swapPinOut(pin, spacer, pinOriginalState);\n\t\t\t\tisReverted = r;\n\t\t\t}\n\t\t}\n\n\n\t\tself.refresh = soft => {\n\t\t\tif (_refreshing || !enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (pin && soft && _lastScrollTime) {\n\t\t\t\t_addListener(ScrollTrigger, \"scrollEnd\", softRefresh);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet prevScroll = Math.max(self.scroll(), self.scroll.rec || 0), // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.\n\t\t\t\tprevProgress = self.progress;\n\t\t\t_refreshing = 1;\n\t\t\tscrubTween && scrubTween.kill();\n\t\t\tinvalidateOnRefresh && animation && animation.progress(0).invalidate().progress(self.progress);\n\t\t\tisReverted || self.revert();\n\t\t\tlet size = (isViewport ? _win[\"inner\" + direction.d2] : scroller[\"client\" + direction.d2]) || 0,\n\t\t\t\tscrollerBounds = isViewport ? _winOffsets : _getBounds(scroller),\n\t\t\t\tmax = _maxScroll(scroller, direction),\n\t\t\t\toffset = 0,\n\t\t\t\totherPinOffset = 0,\n\t\t\t\tparsedEnd = vars.end,\n\t\t\t\tparsedEndTrigger = vars.endTrigger || trigger,\n\t\t\t\tparsedStart = vars.start || (pin || !trigger ? \"0 0\" : \"0 100%\"),\n\t\t\t\tpinIndex = pin && Math.max(0, _triggers.indexOf(self)) || 0,\n\t\t\t\tcs, bounds, scroll, isVertical, override, i, curTrigger;\n\t\t\tif (pinIndex) { // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things \"rewind\" properly.\n\t\t\t\ti = pinIndex;\n\t\t\t\twhile (i--) {\n\t\t\t\t\t_triggers[i].pin === pin && _triggers[i].revert();\n\t\t\t\t}\n\t\t\t}\n\t\t\tstart = _parsePosition(parsedStart, trigger, size, direction, self.scroll(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, isViewport, max) || (pin ? -0.001 : 0);\n\t\t\t_isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));\n\t\t\tif (_isString(parsedEnd) && !parsedEnd.indexOf(\"+=\")) {\n\t\t\t\tif (~parsedEnd.indexOf(\" \")) {\n\t\t\t\t\tparsedEnd = (_isString(parsedStart) ? parsedStart.split(\" \")[0] : \"\") + parsedEnd;\n\t\t\t\t} else {\n\t\t\t\t\toffset = _offsetToPx(parsedEnd.substr(2), size);\n\t\t\t\t\tparsedEnd = _isString(parsedStart) ? parsedStart : start + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.\n\t\t\t\t\tparsedEndTrigger = trigger;\n\t\t\t\t}\n\t\t\t}\n\t\t\tend = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? \"100% 0\" : max), parsedEndTrigger, size, direction, self.scroll() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, isViewport, max)) || -0.001;\n\t\t\tchange = (end - start) || ((start -= 0.01) && 0.001);\n\t\t\tif (pin) {\n\t\t\t\ti = pinIndex;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tcurTrigger = _triggers[i];\n\t\t\t\t\tif (curTrigger.pin === pin && curTrigger.start - curTrigger._pinPush < start) {\n\t\t\t\t\t\totherPinOffset += curTrigger.end - curTrigger.start;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstart += otherPinOffset;\n\t\t\t\tend += otherPinOffset;\n\t\t\t\tself._pinPush = otherPinOffset;\n\t\t\t\tif (markerStart && otherPinOffset) { // offset the markers if necessary\n\t\t\t\t\tcs = {};\n\t\t\t\t\tcs[direction.a] = \"+=\" + otherPinOffset;\n\t\t\t\t\tgsap.set([markerStart, markerEnd], cs);\n\t\t\t\t}\n\t\t\t\tcs = _getComputedStyle(pin);\n\t\t\t\tisVertical = (direction === _vertical);\n\t\t\t\tscroll = self.scroll(); // recalculate because the triggers can affect the scroll\n\t\t\t\tpinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;\n\t\t\t\t_swapPinIn(pin, spacer, cs);\n\t\t\t\tpinState = _getState(pin);\n\t\t\t\t// transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.\n\t\t\t\tbounds = _getBounds(pin, true);\n\t\t\t\tif (pinSpacing) {\n\t\t\t\t\tspacer.style[pinSpacing + direction.os2] = change + otherPinOffset + _px;\n\t\t\t\t\tspacingActive = (pinSpacing === _padding) ? _getSize(pin, direction) + change + otherPinOffset : 0;\n\t\t\t\t\tspacingActive && (spacer.style[direction.d] = spacingActive + _px); // for box-sizing: border-box (must include padding).\n\t\t\t\t\tisViewport && self.scroll(prevScroll);\n\t\t\t\t}\n\t\t\t\tif (isViewport) {\n\t\t\t\t\toverride = {\n\t\t\t\t\t\ttop: (bounds.top + (isVertical ? scroll - start : 0)) + _px,\n\t\t\t\t\t\tleft: (bounds.left + (isVertical ? 0 : scroll - start)) + _px,\n\t\t\t\t\t\tboxSizing: \"border-box\",\n\t\t\t\t\t\tposition: \"fixed\"\n\t\t\t\t\t};\n\t\t\t\t\toverride[_width] = override[\"max\" + _Width] = Math.ceil(bounds.width) + _px;\n\t\t\t\t\toverride[_height] = override[\"max\" + _Height] = Math.ceil(bounds.height) + _px;\n\t\t\t\t\toverride[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = \"0\";\n\t\t\t\t\toverride[_padding] = cs[_padding];\n\t\t\t\t\toverride[_padding + _Top] = cs[_padding + _Top];\n\t\t\t\t\toverride[_padding + _Right] = cs[_padding + _Right];\n\t\t\t\t\toverride[_padding + _Bottom] = cs[_padding + _Bottom];\n\t\t\t\t\toverride[_padding + _Left] = cs[_padding + _Left];\n\t\t\t\t\tpinActiveState = _copyState(pinOriginalState, override, pinReparent);\n\t\t\t\t}\n\t\t\t\tif (animation) { // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.\n\t\t\t\t\tanimation.progress(1, true);\n\t\t\t\t\tpinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;\n\t\t\t\t\tchange !== pinChange && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.\n\t\t\t\t\tanimation.progress(0, true);\n\t\t\t\t} else {\n\t\t\t\t\tpinChange = change\n\t\t\t\t}\n\t\t\t\tif (pinIndex) { // make sure we revert from first to last to make sure things reach their end state properly\n\t\t\t\t\tfor (i = 0; i < pinIndex; i++) {\n\t\t\t\t\t\t_triggers[i].pin === pin && _triggers[i].revert(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (trigger && self.scroll()) { // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()\n\t\t\t\tbounds = trigger.parentNode;\n\t\t\t\twhile (bounds && bounds !== _body) {\n\t\t\t\t\tif (bounds._pinOffset) {\n\t\t\t\t\t\tstart -= bounds._pinOffset;\n\t\t\t\t\t\tend -= bounds._pinOffset;\n\t\t\t\t\t}\n\t\t\t\t\tbounds = bounds.parentNode;\n\t\t\t\t}\n\t\t\t}\n\t\t\tself.start = start;\n\t\t\tself.end = end;\n\t\t\tself.scroll() < prevScroll && self.scroll(prevScroll);\n\t\t\tself.revert(false);\n\t\t\t_refreshing = 0;\n\t\t\tif (prevProgress !== self.progress) { // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.\n\t\t\t\tscrubTween && animation.totalProgress(prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.\n\t\t\t\tself.progress = prevProgress;\n\t\t\t\tself.update();\n\t\t\t}\n\t\t\tpin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));\n\t\t\tonRefresh && onRefresh(self);\n\t\t};\n\n\t\tself.getVelocity = () => ((self.scroll() - scroll2) / (_getTime() - _time2) * 1000) || 0;\n\n\t\tself.update = (reset, recordVelocity) => {\n\t\t\tlet scroll = self.scroll(),\n\t\t\t\tp = reset ? 0 : (scroll - start) / change,\n\t\t\t\tclipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,\n\t\t\t\tprevProgress = self.progress,\n\t\t\t\tisActive, wasActive, toggleState, action, stateChanged, toggled;\n\t\t\tif (recordVelocity) {\n\t\t\t\tscroll2 = scroll1;\n\t\t\t\tscroll1 = scroll;\n\t\t\t\tif (snap) {\n\t\t\t\t\tsnap2 = snap1;\n\t\t\t\t\tsnap1 = animation && !isToggle ? animation.totalProgress() : clipped;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).\n\t\t\t(anticipatePin && !clipped && pin && !_refreshing && start < scroll + ((scroll - scroll2) / (_getTime() - _time2)) * anticipatePin) && (clipped = 0.0001);\n\t\t\tif (clipped !== prevProgress && enabled) {\n\t\t\t\tisActive = self.isActive = !!clipped && clipped < 1;\n\t\t\t\twasActive = !!prevProgress && prevProgress < 1;\n\t\t\t\ttoggled = isActive !== wasActive;\n\t\t\t\tstateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)\n\t\t\t\tself.direction = clipped > prevProgress ? 1 : -1;\n\t\t\t\tself.progress = clipped;\n\t\t\t\tif (!isToggle) {\n\t\t\t\t\tif (scrubTween && !_refreshing && !_startup) {\n\t\t\t\t\t\tscrubTween.vars.totalProgress = clipped;\n\t\t\t\t\t\tscrubTween.invalidate().restart();\n\t\t\t\t\t} else if (animation) {\n\t\t\t\t\t\tanimation.totalProgress(clipped, !!_refreshing);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pin) {\n\t\t\t\t\treset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);\n\t\t\t\t\tif (!isViewport) {\n\t\t\t\t\t\tpinSetter(pinStart + pinChange * clipped);\n\t\t\t\t\t} else if (stateChanged) {\n\t\t\t\t\t\taction = !reset && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)\n\t\t\t\t\t\tif (pinReparent) {\n\t\t\t\t\t\t\tif (!_refreshing && (isActive || action)) {\n\t\t\t\t\t\t\t\tlet bounds = _getBounds(pin, true),\n\t\t\t\t\t\t\t\t\toffset = scroll - start;\n\t\t\t\t\t\t\t\tpin.style.top = (bounds.top + (direction === _vertical ? offset : 0)) + _px;\n\t\t\t\t\t\t\t\tpin.style.left = (bounds.left + (direction === _vertical ? 0 : offset)) + _px;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_reparent(pin, !_refreshing && (isActive || action) ? _body : spacer);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_setState(isActive || action ? pinActiveState : pinState);\n\t\t\t\t\t\t(pinChange !== change && clipped < 1 && isActive) || pinSetter(pinStart + (clipped === 1 && !action ? pinChange : 0));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (snap && !tweenTo.tween && !_refreshing && !_startup) {\n\t\t\t\t\tscrubScrollTime = _lastScrollTime;\n\t\t\t\t\tsnapDelayedCall.restart(true);\n\t\t\t\t}\n\t\t\t\ttoggleClass && toggled && (!once || isActive) && _toArray(toggleClass.targets).forEach(el => el.classList[isActive ? \"add\" : \"remove\"](toggleClass.className)); // classes could affect positioning, so do it even if reset or refreshing is true.\n\t\t\t\tonUpdate && !isToggle && !reset && onUpdate(self);\n\t\t\t\tif (stateChanged && !_refreshing) {\n\t\t\t\t\ttoggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.\n\t\t\t\t\tif (clipped === 1 && once) {\n\t\t\t\t\t\tself.kill();\n\t\t\t\t\t} else if (isToggle) {\n\t\t\t\t\t\taction = (!toggled && toggleActions[toggleState+1] !== \"none\" && toggleActions[toggleState+1]) || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the \"enter\" action, we should switch to the \"leave\" in this case (but only if one is defined)\n\t\t\t\t\t\tif (animation && (action === \"complete\" || action === \"reset\" || action in animation)) {\n\t\t\t\t\t\t\tif (action === \"complete\") {\n\t\t\t\t\t\t\t\tanimation.pause().totalProgress(1);\n\t\t\t\t\t\t\t} else if (action === \"reset\") {\n\t\t\t\t\t\t\t\tanimation.restart(true).pause();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tanimation[action]();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonUpdate && onUpdate(self);\n\t\t\t\t\t}\n\t\t\t\t\tif (toggled || !_startup) { // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.\n\t\t\t\t\t\tonToggle && toggled && onToggle(self);\n\t\t\t\t\t\tcallbacks[toggleState] && callbacks[toggleState](self);\n\t\t\t\t\t\tonce && (callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.\n\t\t\t\t\t\tif (!toggled) { // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order\n\t\t\t\t\t\t\ttoggleState = clipped === 1 ? 1 : 3;\n\t\t\t\t\t\t\tcallbacks[toggleState] && callbacks[toggleState](self);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (isToggle && onUpdate && !_refreshing) {\n\t\t\t\t\tonUpdate(self);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// update absolutely-positioned markers (only if the scroller isn't the viewport)\n\t\t\tif (markerEndSetter) {\n\t\t\t\tmarkerStartSetter(scroll + (markerStartTrigger._isFlipped ? 1 : 0));\n\t\t\t\tmarkerEndSetter(scroll);\n\t\t\t}\n\t\t};\n\n\t\tself.enable = () => {\n\t\t\tif (!enabled) {\n\t\t\t\tenabled = true;\n\t\t\t\t_addListener(scroller, \"resize\", _onResize);\n\t\t\t\t_addListener(scroller, \"scroll\", _onScroll);\n\t\t\t\tonRefreshInit && _addListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\t\t\t\tanimation && (animation.add ? gsap.delayedCall(0.01, self.refresh) && (change = 0.01) && (start = end = 0) : self.refresh()); // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick.\n\t\t\t}\n\t\t};\n\n\t\tself.disable = reset => {\n\t\t\tif (enabled) {\n\t\t\t\tenabled = self.isActive = false;\n\t\t\t\tscrubTween && scrubTween.pause();\n\t\t\t\treset !== enabled && self.update(1);\n\t\t\t\tpin && _swapPinOut(pin, spacer, pinOriginalState);\n\t\t\t\tonRefreshInit && _removeListener(ScrollTrigger, \"refreshInit\", onRefreshInit);\n\t\t\t\tif (snapDelayedCall) {\n\t\t\t\t\tsnapDelayedCall.pause();\n\t\t\t\t\ttweenTo.tween && tweenTo.tween.kill();\n\t\t\t\t}\n\t\t\t\tif (!isViewport) {\n\t\t\t\t\tlet i = _triggers.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (_triggers[i].scroller === scroller && _triggers[i] !== self) {\n\t\t\t\t\t\t\treturn; //don't remove the listeners if there are still other triggers referencing it.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t_removeListener(scroller, \"resize\", _onResize);\n\t\t\t\t\t_removeListener(scroller, \"scroll\", _onScroll);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tself.kill = reset => {\n\t\t\tself.disable(reset);\n\t\t\tid && (delete _ids[id]);\n\t\t\t_triggers.splice(_triggers.indexOf(self), 1);\n\t\t\tanimation && (animation.scrollTrigger = null);\n\t\t};\n\n\t\tself.enable();\n\t}\n\n\n\tstatic register(core) {\n\t\tgsap = core || _getGSAP();\n\t\tif (_windowExists() && window.document) {\n\t\t\t_win = window;\n\t\t\t_doc = document;\n\t\t\t_docEl = _doc.documentElement;\n\t\t\t_body = _doc.body;\n\t\t}\n\t\tif (gsap) {\n\t\t\t_toArray = gsap.utils.toArray;\n\t\t\t_clamp = gsap.utils.clamp;\n\t\t\tgsap.core.globals(\"ScrollTrigger\", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a \"name\" property.\n\t\t\tif (_body) {\n\t\t\t\t_raf = _win.requestAnimationFrame || (f => setTimeout(f, 16));\n\t\t\t\t_addListener(_win, \"mousewheel\", _onScroll);\n\t\t\t\t_root = [_win, _doc, _docEl, _body];\n\t\t\t\t_addListener(_doc, \"scroll\", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!\n\t\t\t\tlet bodyStyle = _body.style,\n\t\t\t\t\tborder = bodyStyle.borderTop,\n\t\t\t\t\tbounds;\n\t\t\t\tbodyStyle.borderTop = \"1px solid #000\"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.\n\t\t\t\tbounds = _getBounds(_body);\n\t\t\t\t_vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding\n\t\t\t\t_horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;\n\t\t\t\tborder ? (bodyStyle.borderTop = border) : bodyStyle.removeProperty(\"border-top\");\n\t\t\t\t_syncInterval = setInterval(_sync, 100);\n\t\t\t\tgsap.delayedCall(0.5, () => _startup = 0);\n\t\t\t\t_addListener(_doc, \"touchcancel\", _passThrough); // some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document.\n\t\t\t\t_addListener(_body, \"touchstart\", _passThrough); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\t\t\t\t_multiListener(_addListener, _doc, \"pointerdown,touchstart,mousedown\", () => _pointerIsDown = 1);\n\t\t\t\t_multiListener(_addListener, _doc, \"pointerup,touchend,mouseup\", () => _pointerIsDown = 0);\n\t\t\t\t_transformProp = gsap.utils.checkPrefix(\"transform\");\n\t\t\t\t_stateProps.push(_transformProp);\n\t\t\t\t_coreInitted = _getTime();\n\t\t\t\t_resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();\n\t\t\t\t_addListener(_doc, \"visibilitychange\", () => _doc.hidden || _refreshAll());\n\t\t\t\t_addListener(_doc, \"DOMContentLoaded\", _refreshAll);\n\t\t\t\t_addListener(_win, \"load\", () => _lastScrollTime || _refreshAll());\n\t\t\t\t_addListener(_win, \"resize\", _onResize);\n\t\t\t}\n\t\t}\n\t\treturn _coreInitted;\n\t}\n\n\tstatic defaults(config) {\n\t\tfor (let p in config) {\n\t\t\t_defaults[p] = config[p];\n\t\t}\n\t}\n\n\tstatic kill() {\n\t\t_enabled = 0;\n\t\t_triggers.slice(0).forEach(trigger => trigger.kill(1));\n\t}\n\n}\n\nScrollTrigger.version = \"3.3.3\";\nScrollTrigger.create = (vars, animation) => new ScrollTrigger(vars, animation);\nScrollTrigger.refresh = safe => safe ? _onResize() : _refreshAll(true);\nScrollTrigger.update = _updateAll;\nScrollTrigger.maxScroll = (element, horizontal) => _maxScroll(element, horizontal ? _horizontal : _vertical);\nScrollTrigger.getScrollFunc = (element, horizontal) => (horizontal = horizontal ? _horizontal : _vertical) && (_isViewport(element) ? horizontal.sc : _getScrollFunc(element, horizontal));\nScrollTrigger.getById = id => _ids[id];\nScrollTrigger.getAll = () => _triggers.slice(0);\nScrollTrigger.syncInterval = ms => clearInterval(_syncInterval) || ((_syncInterval = ms) && setInterval(_sync, ms));\nScrollTrigger.isScrolling = () => !!_lastScrollTime;\nScrollTrigger.addEventListener = (type, callback) => {\n\tlet a = _listeners[type] || (_listeners[type] = []);\n\t~a.indexOf(callback) || a.push(callback);\n};\nScrollTrigger.removeEventListener = (type, callback) => {\n\tlet a = _listeners[type],\n\t\ti = a && a.indexOf(callback);\n\ti >= 0 && a.splice(i, 1);\n};\nScrollTrigger.batch = (targets, vars) => {\n\tlet result = [],\n\t\tvarsCopy = {},\n\t\tinterval = vars.interval || 0.016,\n\t\tbatchMax = vars.batchMax || 1e9,\n\t\tproxyCallback = (type, callback) => {\n\t\t\tlet elements = [],\n\t\t\t\ttriggers = [],\n\t\t\t\tdelay = gsap.delayedCall(interval, () => {callback(elements, triggers); elements = []; triggers = [];}).pause();\n\t\t\treturn self => {\n\t\t\t\telements.length || delay.restart(true);\n\t\t\t\telements.push(self.trigger);\n\t\t\t\ttriggers.push(self);\n\t\t\t\tbatchMax <= elements.length && delay.progress(1);\n\t\t\t};\n\t\t},\n\t\tp;\n\tfor (p in vars) {\n\t\tvarsCopy[p] = (p.substr(0, 2) === \"on\" && _isFunction(vars[p]) && p !== \"onRefreshInit\") ? proxyCallback(p, vars[p]) : vars[p];\n\t}\n\tif (_isFunction(batchMax)) {\n\t\tbatchMax = batchMax();\n\t\tScrollTrigger.addEventListener(\"refresh\", () => batchMax = vars.batchMax());\n\t}\n\t_toArray(targets).forEach(target => {\n\t\tlet config = {};\n\t\tfor (p in varsCopy) {\n\t\t\tconfig[p] = varsCopy[p];\n\t\t}\n\t\tconfig.trigger = target;\n\t\tresult.push(ScrollTrigger.create(config));\n\t});\n\treturn result;\n}\n\n_getGSAP() && gsap.registerPlugin(ScrollTrigger);\n\nexport { ScrollTrigger as default };"],"names":["_passThrough","v","_windowExists","window","_getGSAP","gsap","registerPlugin","_isViewport","e","_root","indexOf","_getScrollFunc","element","s","value","arguments","length","_maxScroll","d2","Math","max","_docEl","_body","_win","_isString","_isFunction","_isNumber","_isObject","_getComputedStyle","getComputedStyle","_setDefaults","obj","defaults","p","_getBounds","withoutTransforms","tween","_transformProp","to","x","y","xPercent","yPercent","rotation","rotationX","rotationY","scale","skewX","skewY","progress","bounds","getBoundingClientRect","kill","_getSize","_multiListener","func","types","callback","split","forEach","type","_addListener","addEventListener","passive","_removeListener","removeEventListener","_offsetToPx","size","eqIndex","relative","charAt","parseFloat","substr","_keywords","_createMarker","name","container","direction","offset","matchWidthEl","startColor","endColor","fontSize","indent","fontWeight","_doc","createElement","isViewport","isScroller","parent","isStart","color","css","_vertical","_right","_bottom","offsetWidth","_isStart","setAttribute","style","cssText","innerText","insertBefore","children","_offset","op","_positionMarker","_sync","_request","_raf","_updateAll","_onScroll","_lastScrollTime","_dispatch","_getTime","_onResize","_refreshing","_resizeDelay","restart","_refreshAll","force","refreshInits","l","_triggers","i","scroll","rec","refresh","result","render","_swapPinOut","pin","spacer","state","_setState","parentNode","removeChild","_swapPinIn","cs","_propNamesToCopy","spacerStyle","pinStyle","position","overflow","boxSizing","_width","_horizontal","_px","_height","_padding","_margin","_top","_left","appendChild","_getState","_stateProps","push","t","_parsePosition","trigger","scrollerSize","marker","markerScroller","self","scrollerBounds","borderWidth","scrollerMax","localOffset","globalOffset","display","_toArray","offsets","left","top","removeProperty","d","m","round","_getTweenCreator","scroller","lastScroll","getScroll","sc","prop","p2","getTween","scrollTo","vars","initialValue","change1","change2","onComplete","modifiers","ratio","call","_coreInitted","_clamp","_time2","_syncInterval","_pointerIsDown","_startup","Date","now","_time1","_enabled","_abs","abs","_scrollLeft","_scrollTop","_Right","_Left","_Top","_Bottom","_Width","_Height","os","os2","a","pageXOffset","pageYOffset","_markerDefaults","_defaults","toggleActions","anticipatePin","center","bottom","right","start","flipped","side","oppositeSide","_isFlipped","set","_ids","_listeners","_emptyArray","map","f","time","recordVelocity","update","concat","_capsExp","replace","toLowerCase","_winOffsets","_prefixExp","ScrollTrigger","init","animation","this","tweenTo","pinCache","snapFunc","isReverted","scroll1","scroll2","end","markerStart","markerEnd","markerStartTrigger","markerEndTrigger","markerVars","change","pinOriginalState","pinActiveState","pinState","pinGetter","pinSetter","pinStart","pinChange","spacingStart","spacingActive","markerStartSetter","markerEndSetter","snap1","snap2","scrubScrollTime","scrubTween","scrubSmooth","snapDurClamp","snapDelayedCall","enabled","nodeType","horizontal","onUpdate","toggleClass","id","onToggle","onRefresh","scrub","pinSpacing","invalidateOnRefresh","onScrubComplete","onSnapComplete","once","snap","pinReparent","isToggle","scrollerCache","core","getCache","callbacks","onEnter","onLeave","onEnterBack","onLeaveBack","markers","softRefresh","onRefreshInit","tweenScroll","lazy","_initted","immediateRender","pause","scrollTrigger","ease","duration","snapTo","_getLabels","labels","utils","min","delayedCall","delay","totalProgress","velocity","naturalEnd","endValue","endScroll","data","targets","className","force3D","getProperty","quickSetter","_makePositionable","revert","r","soft","prevScroll","prevProgress","invalidate","isVertical","override","curTrigger","otherPinOffset","parsedEnd","parsedEndTrigger","endTrigger","parsedStart","pinIndex","_pinPush","ceil","width","height","_copyState","omitOffsets","splice","_pinOffset","getVelocity","reset","isActive","toggleState","action","stateChanged","toggled","clipped","_reparent","_stOrig","test","el","classList","enable","add","disable","register","document","documentElement","body","toArray","clamp","globals","requestAnimationFrame","setTimeout","bodyStyle","border","borderTop","setInterval","checkPrefix","hidden","config","slice","console","warn","version","create","safe","maxScroll","getScrollFunc","getById","getAll","syncInterval","ms","clearInterval","isScrolling","batch","proxyCallback","elements","triggers","interval","batchMax","varsCopy","target"],"mappings":"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"}